html {
    scroll-behavior: smooth;
}

body.no-page-header {

    .woody-component-hero.tpl_01,
    .home-slider {
        height: 100vh;
    }
}

// Application du max-width sur le body
@if $body-has-maxwidth {
    body {
        @include breakpoint($body-maxwidth) {
            max-width: $body-maxwidth;
            margin: 0 auto;

            // Body shadow seulement s'il a une max-width
            @if $body-shadow {
                @include smooth-shadow($type:box, $y:$body-shadow-distance, $blur:$body-shadow-blur, $color:$body-shadow-color, $opacity:$body-shadow-opacity, $layers:$body-shadow-layers, $ratio:$body-shadow-curve, $oRatio:0);
            }

            // Eviter les débordements de swiper qui se calculent en js par rapport à la largeur de l'écran
            .main-wrapper {
                overflow-x: hidden;
            }

            // Taille et positionnement du headnavs pour qu'il suive le max-width du body à partir de cette largeur d'écran
            .woody-component-headnavs {
                max-width: $body-maxwidth;
                left: calc((100vw - #{$body-maxwidth})/2);
            }
        }
    }
}

// .disallow-scroll {
//     height: 100%;
//     overflow: hidden;
// }

.woody-grid-frame {
    @include breakpoint(large) {
        height: 100%;

        &.grid-padding-y {
            height: calc(100% + #{map-get($grid-padding-gutters, medium)});
        }
    }
}

/****************
** Positioning **
****************/

.fullcenterbox {
    @include fullcenterBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.bottomcenterBox {
    @include bottomcenterBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.topleftbox {
    @include topleftBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.centerleftbox {
    @include centerleftBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.bottomrightbox {
    @include bottomrightBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.bottomleftbox {
    @include bottomleftBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.toprightbox {
    @include toprightBox;

    &.fcbCol {
        flex-direction: column;
        align-items: flex-end;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.centerrightbox {
    @include centerrightBox;

    &.fcbCol {
        flex-direction: column;
    }

    &.fcbRow {
        flex-direction: row;
    }
}

.isRel {
    position: relative;
}

.isAbs {
    @include isAbs;
}

@include breakpoint(large) {
    .large-isAbs {
        @include isAbs;
    }
}

/***************
** Paddings **
***************/

.padd-all {
    @include dynamic-spaces();
}

.padd-top {
    @include dynamic-spaces($attribute: padding-top);
}

.padd-bottom {
    @include dynamic-spaces($attribute: padding-bottom);
}

.padd-left {
    @include dynamic-spaces($attribute: padding-left);
}

.padd-right {
    @include dynamic-spaces($attribute: padding-right);
}

.page-teaser,
.page-section {

    [class*='bgimg'],
    [class*='bg-'] {
        &.padd-top {
            @include dynamic-spaces($attribute: padding-top, $size_type: large);
        }

        &.padd-bottom {
            @include dynamic-spaces($attribute: padding-bottom, $size_type: large);
        }
    }
}

/***************
** Margins **
***************/

.marg-all {
    @include dynamic-spaces($attribute: margin);
}

.marg-top {
    @include dynamic-spaces($attribute: margin-top);
}

.marg-bottom {
    @include dynamic-spaces($attribute: margin-bottom);
}

.marg-left {
    @include dynamic-spaces($attribute: margin-left);
}

.marg-right {
    @include dynamic-spaces($attribute: margin-right);
}

body .padd-all-none {
    padding: 0;
}

// === Paddings and margins with breakpoints
// large-padd-top-sm || medium-padd-left-md || xmedium-padd || medium-marg-top || large-marge-bottom
// large-down-padd-top-sm || medium-down-padd-left-md || xmedium-down-padd || medium-down-marg-top || large-down-marge-bottom
// allowed breakpoints : small || medium || xmedium || large || xlarge || xxlarge
$directions: ('top', 'right', 'bottom', 'left');
$props: (margin:'marg', padding:'padd');

@each $breakpoint,
$screen-size in $breakpoints {
    @each $direction in $directions {
        @include breakpoint($breakpoint) {

            @each $prop,
            $shortname in $props {
                .#{$breakpoint}-#{$shortname}-#{$direction} {
                    @include dynamic-spaces($attribute: #{$prop}-#{$direction});
                }
            }
        }

        @include breakpoint($breakpoint down) {

            @each $prop,
            $shortname in $props {
                .#{$breakpoint}-down-#{$shortname}-#{$direction} {
                    @include dynamic-spaces($attribute: #{$prop}-#{$direction});
                }
            }
        }
    }

    @each $prop,
    $shortname in $props {
        @include breakpoint($breakpoint) {
            .#{$breakpoint}-#{$shortname} {
                @include dynamic-spaces($attribute: #{$prop});
            }
        }
    }

    @each $prop,
    $shortname in $props {
        @include breakpoint($breakpoint down) {
            .#{$breakpoint}-down-#{$shortname} {
                @include dynamic-spaces($attribute: #{$prop});
            }
        }
    }
}

/********************************
** Classes padding genericBloc **
********************************/
// Retirer ces deux classes lorsqu'il n'y aura plus de meta leur correspondant en base
.large-padd-all-lg {
    @include breakpoint(large) {
        padding: 60px;
    }
}

.large-padd-all-xlg {
    @include breakpoint(large) {
        padding: 120px;
    }
}

/*********************
** Flex alignements **
*********************/

.flex-container.wrap {
    flex-wrap: wrap;
}

.flex-grow {
    flex-grow: 1;
}

.align-stretch {
    >.cell>.woody-component {
        height: 100%;
    }

    >.cell>.visualModifier {
        height: 100%;

        &>.woody-component {
            height: 100%;
        }
    }
}

.justify-items-left {
    justify-items: flex-start;
}

.justify-items-center {
    justify-items: center;
}

.justify-items-right {
    justify-items: flex-end;
}

/*********************
**     Bordering    **
*********************/

[class*="border-"] {
    border-style: $bg-params-border-style;
    border-width: $bg-params-border-width;
}


/*********************
**     Container    **
*********************/

.container-min {
    max-width: 800px;
}

.box-sizing {
    box-sizing: border-box;
}

/****************************************************
**     Fix width of img inserted by text editor    **
****************************************************/

.wp-caption {
    max-width: 100%;
}

/*********************
**     X Y Sizes    **
*********************/
.full {
    &-width {
        width: 100%;
    }

    &-height {
        height: 100%;
    }

    &-fill {
        width: 100%;
        height: 100%;
    }
}

@include breakpoint(large) {
    .large-full {
        &-width {
            width: 100%;
        }

        &-height {
            height: 100%;
        }

        &-fill {
            width: 100%;
            height: 100%;
        }
    }
}

/*********************************
**     Min-width & max-width    **
*********************************/
@for $i from 8 through 14 {
    @if $i % 2==0 {
        .min-width-#{$i}00 {
            min-width: 100px*$i;
        }

        .max-width-#{$i}00 {
            max-width: 100px*$i;
        }
    }
}

/********************************************************************
**     Limit width of the grid when items|length == 1 || 2    **
********************************************************************/
.max-width-grid-cards {
    @include maxWidthGridCards(2);
}

// Disable limitation for two columns when the section has not full-width
.woody-component-focus {
    &[class*='tpl_2'] {
        .max-width-grid-cards-2 {
            @include root('.section-layout-wrapper.grid-container') {
                max-width: initial;
            }
        }
    }
}

/************
** Z-Index **
************/
$zindex-values : (1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100);

.z-index {
    @each $zindex in $zindex-values {
        &-#{$zindex} {
            z-index: $zindex;
        }
    }
}

/************************
**    Aspect Ratios    **
************************/
.aspect-ratio {
    &-8-1 {
        aspect-ratio: 8/1;
    }

    &-4-1 {
        aspect-ratio: 4/1;
    }

    &-3-1 {
        aspect-ratio: 3/1;
    }

    &-2-1 {
        aspect-ratio: 2/1;
    }

    &-16-9 {
        aspect-ratio: 16/9;
    }

    &-4-3 {
        aspect-ratio: 4/3;
    }

    &-3-4 {
        aspect-ratio: 3/4;
    }

    &-10-16 {
        aspect-ratio: 10/16;
    }

    &-a4 {
        aspect-ratio: 210/297;
    }

    &-square,
    &-1-1 {
        aspect-ratio: 1;
    }
}

/*************************
**  Responsive Reorder  **
*************************/
@each $bp,
$px in $breakpoints {
    @for $i from 0 through 9 {
        @include breakpoint(#{$bp} down) {
            .#{$bp}-down-order-#{$i} {
                order: #{$i};
            }
        }
    }
}
