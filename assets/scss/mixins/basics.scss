@mixin isAbs {
    position: absolute;
    $sides: top, right, bottom, left;

    @each $side in $sides {
        &.at-#{$side} {
            #{$side}: 0;
        }
    }
}

@mixin the_box {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%) translateZ(0);
    width: 100%;
    height: 100%;
    display: flex;

    @include root('.card') {
        transform: none;
        top: 0;
        left: 0;
        z-index: 1;
    }
}

@mixin fullcenterBox() {
    @include the_box;
    align-items: center;
    justify-content: center;
    text-align: center;
    //@include improve_transition;
}

@mixin bottomcenterBox() {
    @include the_box;
    align-items: center;
    justify-content: flex-end;
    text-align: center;
    //@include improve_transition;
}

@mixin topleftBox() {
    @include the_box;
    align-items: flex-start;
    justify-content: flex-start;
    text-align: left;
    //@include improve_transition;
}

@mixin centerleftBox() {
    @include the_box;
    align-items: center;
    justify-content: flex-start;
    text-align: left;
    //@include improve_transition;
}

@mixin bottomrightBox() {
    @include the_box;
    align-items: flex-end;
    justify-content: flex-end;
    text-align: right;
    //@include improve_transition;
}

@mixin bottomleftBox() {
    @include the_box;
    align-items: flex-start;
    justify-content: flex-end;
    text-align: left;
    //@include improve_transition;
}

@mixin toprightBox() {
    @include the_box;
    align-items: flex-start;
    justify-content: flex-start;
    text-align: right;
    //@include improve_transition;
}

@mixin centerrightBox() {
    @include the_box;
    align-items: center;
    justify-content: flex-end;
    text-align: right;
    //@include improve_transition;
}

@mixin improve_transition() {
    backface-visibility: hidden;
    perspective: 1000px;
}

@mixin colorDivider($color, $el:after, $margin:$color_divider_margin_top auto $color_divider_margin_bottom auto) {
    &:#{$el} {
        display: block;
        width: $color_divider_width;
        height: $color_divider_height;
        background-color: $color;
        content: '';
        margin: $margin;
    }
}

@mixin color-caret($color, $arrowSize: 10%, $arrowPos: right center) {

    // Hide basic caret
    appearance: none;
    -moz-appearance: none;
    -webkit-appearance: none;

    &,
    &:focus,
    &>a,
    &:focus>a {
        background-image: url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' fill='#{$color}' width='30' height='20' viewBox='0 0 30 20'%3E%3Cpath d='M 3.515 0 L 15 12.406 L 26.485 0 L 30 3.797 L 15 20 L 0 3.797 L 3.515 0 Z'%3E%3C/path%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: $arrowPos;
        background-size: $arrowSize;
    }

    &:active,
    &[aria-expanded="true"],
    &:active>a,
    &[aria-expanded="true"]>a {
        background-image: url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' fill='#{$color}' width='30' height='20' viewBox='0 0 30 20'%3E%3Cpath d=' M 26.485 20 L 15 7.594 L 3.515 20 L 0 16.203 L 15 0 L 30 16.203 L 26.485 20 Z'%3E%3C/path%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: $arrowPos;
        background-size: $arrowSize;
    }
}

@mixin caret-spin($color, $size) {
    position: relative;

    &:after,
    &:before {
        position: absolute;
        top: 0;
        right: 10px;
        width: 10px;
        height: 100%;
        pointer-events: none;
        cursor: pointer;
        background-repeat: no-repeat;
        background-size: $size;
    }

    &:after {
        content: "";
        background-image: url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' fill='#{rgba($color,.9)}' width='30' height='20' viewBox='0 0 30 20'%3E%3Cpath d=' M 26.485 20 L 15 7.594 L 3.515 20 L 0 16.203 L 15 0 L 30 16.203 L 26.485 20 Z'%3E%3C/path%3E%3C/svg%3E");
        background-position: center 30%;
    }

    &:before {
        content: "";
        background-image: url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' fill='#{rgba($color,.9)}' width='30' height='20' viewBox='0 0 30 20'%3E%3Cpath d='M 3.515 0 L 15 12.406 L 26.485 0 L 30 3.797 L 15 20 L 0 3.797 L 3.515 0 Z'%3E%3C/path%3E%3C/svg%3E");
        background-position: center 70%;
    }
}

// Display hr on each side of the title section
@mixin hr($color, $height: 1px, $width: 95vw) {
    width: $width;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;

    &:before {
        content: '';
        flex: 1;
        height: $height;
        margin-left: 5%;
        margin-right: 2.5%;
        background: $color;
    }

    &:after {
        content: '';
        flex: 1;
        height: $height;
        margin-right: 5%;
        margin-left: 2.5%;
        background: $color;
    }
}

// Placeholder mixin usage :
// @include placeholder {
//     font-style:italic;
//     color: white;
//     font-weight:100;
// }
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

// Create a triangle using the borders
@mixin triangle($size, $color, $direction) {
    height: 0;
    width: 0;

    border-color: transparent;
    border-style: solid;
    border-width: $size;

    @if $direction==up {
        border-bottom-color: $color;
    }

    @else if $direction==right {
        border-left-color: $color;
    }

    @else if $direction==down {
        border-top-color: $color;
    }

    @else if $direction==left {
        border-right-color: $color;
    }

    @else {
        @error "Aucune direction #{$direction}.";
    }
}

@mixin tooltip($direction: right) {
    cursor: $w-tooltip-cursor;

    &:before {
        content: attr(w-tooltip-#{$direction});
        position: absolute;
        z-index: 9;
        min-height: $w-tooltip-box-size*2;
        padding: $w-tooltip-box-size/4 $w-tooltip-box-size;
        opacity: 0;
        pointer-events: none;
        color: $w-tooltip-color;
        background-color: $w-tooltip-bg;
        font-size: $w-tooltip-font-size;
        font-weight: $w-tooltip-font-weight;
        text-align: center;
        box-shadow: $w-tooltip-boxshadow;
        transform-origin: left;
        transition: transform .2s ease-out;

    }

    &:after {
        content: "";
        position: absolute;
        z-index: 9;
        opacity: 0;
        pointer-events: none;
        transition: transform .2s ease-out;
    }

    // UP
    @if $direction==up {
        &:before {
            left: 50%;
            bottom: calc(100% + #{$w-tooltip-box-size});
            border-top: $w-tooltip-border;
            border-radius: $w-tooltip-radius;
            transform: translateX(-50%) translateY(10px) scale(1.1);
            transform-origin: bottom center;
        }

        &:after {
            @include triangle($w-tooltip-box-size, $w-tooltip-bg, down);
            left: 50%;
            bottom: calc(100% - #{$w-tooltip-box-size} / 2);
            transform: translateX(-50%) translateY(10px) scale(1.1);
            transform-origin: bottom center;
        }
    }

    // LEFT
    @else if $direction==left {
        &:before {
            top: -$w-tooltip-box-size/4;
            right: calc(100% + (#{$w-tooltip-box-size} * 1.5));
            border-left: $w-tooltip-border;
            border-radius: $w-tooltip-radius;
            transform: translateX(10px) scale(1.1);
            transform-origin: center right;
        }

        &:after {
            right: 100%;
            top: calc(50% - #{$w-tooltip-box-size});
            @include triangle($w-tooltip-box-size, $w-tooltip-bg, right);
            transform: translateX(10px) scale(1.1);
            transform-origin: center right;
        }
    }

    // DOWN
    @else if $direction==down {
        &:before {
            left: 50%;
            top: calc(100% + #{$w-tooltip-box-size});
            border-bottom: $w-tooltip-border;
            border-radius: $w-tooltip-radius;
            transform: translateX(-50%) translateY(-10px) scale(1.1);
            transform-origin: top center;
        }

        &:after {
            @include triangle($w-tooltip-box-size, $w-tooltip-bg, up);
            left: 50%;
            top: calc(100% - #{$w-tooltip-box-size} / 2);
            transform: translateX(-50%) translateY(-10px) scale(1.1);
            transform-origin: top center;
        }
    }

    // RIGHT
    @else if $direction==right {
        &:before {
            top: -$w-tooltip-box-size/4;
            left: calc(100% + (#{$w-tooltip-box-size} * 1.5));
            border-right: $w-tooltip-border;
            border-radius: $w-tooltip-radius;
            transform: translateX(-10px) scale(1.1);
            transform-origin: center left;
        }

        &:after {
            left: 100%;
            top: calc(50% - #{$w-tooltip-box-size});
            @include triangle($w-tooltip-box-size, $w-tooltip-bg, left);
            transform: translateX(-10px) scale(1.1);
            transform-origin: center left;
        }
    }

    @else {
        @error "Aucune direction #{$direction}.";
    }

    &:hover {

        &:before,
        &:after {
            opacity: 1;
            transform: translateX(0) scale(1);

            @if $direction==up or $direction==down {
                transform: translateX(-50%) scale(1);
            }
        }
    }
}

@mixin swiperOverflow($left : true, $right : true, $size : large, $context : fullwidth) {
    @if $context==contained {
        @if $left==true {
            .swiper-container {
                padding-left: 20px;
            }
        }

        @if $right==true {
            .swiper-container {
                padding-right: 20px;
            }
        }

        @if $size==small {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 40px;
                    }

                    .swiper-button-prev {
                        left: 50px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 40px;
                    }

                    .swiper-button-next {
                        right: 50px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 60px;
                    }

                    .swiper-button-prev {
                        left: 70px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 60px;
                    }

                    .swiper-button-next {
                        right: 70px;
                    }
                }
            }
        }

        @else if $size==medium {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 50px;
                    }

                    .swiper-button-prev {
                        left: 60px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 50px;
                    }

                    .swiper-button-next {
                        right: 60px;
                    }
                }

            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 75px;
                    }

                    .swiper-button-prev {
                        left: 85px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 75px;
                    }

                    .swiper-button-next {
                        right: 85px;
                    }
                }
            }
        }

        @else if $size==large {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 60px;
                    }

                    .swiper-button-prev {
                        left: 70px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 60px;
                    }

                    .swiper-button-next {
                        right: 70px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 90px;
                    }

                    .swiper-button-prev {
                        left: 100px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 90px;
                    }

                    .swiper-button-next {
                        right: 100px;
                    }
                }
            }
        }

        @else if $size==xlarge {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 100px;
                    }

                    .swiper-button-prev {
                        left: 110px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 100px;
                    }

                    .swiper-button-next {
                        right: 30px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 200px;
                    }

                    .swiper-button-prev {
                        left: 210px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 200px;
                    }

                    .swiper-button-next {
                        right: 210px;
                    }
                }
            }
        }

        @else if $size==xxlarge {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 150px;
                    }

                    .swiper-button-prev {
                        left: 160px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 150px;
                    }

                    .swiper-button-next {
                        right: 30px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 200px;
                    }

                    .swiper-button-prev {
                        left: 210px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 200px;
                    }

                    .swiper-button-next {
                        right: 210px;
                    }
                }
            }

            @include breakpoint(xxlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 240px;
                    }

                    .swiper-button-prev {
                        left: 250px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 240px;
                    }

                    .swiper-button-next {
                        right: 250px;
                    }
                }
            }
        }
    }

    @else if $context==fullwidth {
        @if $left==true {
            .swiper-container {
                padding-left: 40px;
            }
        }

        @if $right==true {
            .swiper-container {
                padding-right: 40px;
            }
        }

        @if $size==small {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 60px;
                    }

                    .swiper-button-prev {
                        left: 70px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 60px;
                    }

                    .swiper-button-next {
                        right: 70px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 90px;
                    }

                    .swiper-button-prev {
                        left: 100px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 90px;
                    }

                    .swiper-button-next {
                        right: 100px;
                    }
                }
            }
        }

        @else if $size==medium {
            @include breakpoint(medium) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 90px;
                    }

                    .swiper-button-prev {
                        left: 100px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 90px;
                    }

                    .swiper-button-next {
                        right: 100px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 180px;
                    }

                    .swiper-button-prev {
                        left: 190px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 180px;
                    }

                    .swiper-button-next {
                        right: 190px;
                    }
                }
            }
        }

        @else if $size==large {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 120px;
                    }

                    .swiper-button-prev {
                        left: 130px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 120px;
                    }

                    .swiper-button-next {
                        right: 130px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 240px;
                    }

                    .swiper-button-prev {
                        left: 250px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 240px;
                    }

                    .swiper-button-next {
                        right: 250px;
                    }
                }
            }
        }

        @else if $size==xlarge {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 200px;
                    }

                    .swiper-button-prev {
                        left: 210px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 200px;
                    }

                    .swiper-button-next {
                        right: 210px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 400px;
                    }

                    .swiper-button-prev {
                        left: 410px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 400px;
                    }

                    .swiper-button-next {
                        right: 410px;
                    }
                }
            }
        }

        @else if $size==xxlarge {
            @include breakpoint(large) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 250px;
                    }

                    .swiper-button-prev {
                        left: 260px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 250px;
                    }

                    .swiper-button-next {
                        right: 260px;
                    }
                }
            }

            @include breakpoint(xlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 400px;
                    }

                    .swiper-button-prev {
                        left: 410px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 400px;
                    }

                    .swiper-button-next {
                        right: 410px;
                    }
                }
            }

            @include breakpoint(xxlarge) {
                @if $left==true {
                    .swiper-container {
                        padding-left: 490px;
                    }

                    .swiper-button-prev {
                        left: 500px;
                    }
                }

                @if $right==true {
                    .swiper-container {
                        padding-right: 490px;
                    }

                    .swiper-button-next {
                        right: 500px;
                    }
                }
            }
        }
    }
}

@mixin Xfader($items, $visibility, $transition) {
    // Number of items
    $n: $items;

    // Item visibility (seconds)
    $a: $visibility;

    // Transition speed (seconds)
    $b: $transition;

    // Animation length
    $t: ($a + $b) * $n;

    // Item delay length
    $d: $t / $n;

    // Keyframe percentages
    $pct-1: percentage(0);
    $pct-2: percentage($a / $t);
    $pct-3: percentage(($a + $b) / $t);
    $pct-4: percentage(1 - $b / $t);
    $pct-5: percentage(1);

    // Animation properties
    @if $n>1 {
        $id: unique-id();

        animation-name: $id;
        animation-duration: $t * 1s;
        animation-iteration-count: infinite;

        @for $i from 1 to $n {
            &:nth-child(#{$i}) {
                animation-delay: $d * ($n - $i) * 1s;
            }
        }

        @keyframes #{$id} {

            #{$pct-1},
            #{$pct-2},
            #{$pct-5} {
                opacity: 1;
                visibility: visible;
            }

            #{$pct-3},
            #{$pct-4} {
                opacity: 0;
                visibility: hidden;
            }
        }
    }
}


/// @author Soheil Saheb-Jamii
/// @param {Value} $y - Max distance of shadow
/// @param {Value} $blur - Max Blur strength
/// @param {Color} $color - Color of the shadow, use rgb or hex
/// @param {Number} $opacity - Max opacity, value between 0 - 1
/// @param {Number} $layers - Number of shadow layers to use
/// @param {Number} $ratio - Ease of the curve, [0->1]; 0 = ease-in, 0.5 = linear, 1 = ease-out
/// @param {Number} $oRatio - Ease of the opacity, [0->1]; 0 = ease-in, 0.5 = linear, 1 = ease-out
/// @param {String} $type - Type of param [box|text|drop]
@mixin smooth-shadow($y:50px, $blur:80px, $color:rgb(0, 0, 0), $opacity:.15, $layers:5, $ratio: 0, $oRatio: .5, $type:box) {
    $shadows: ();
    $ratio: $ratio + 1;
    $oRatio: $oRatio + 1;

    @for $i from 1 through $layers {
        $curve-dir: $layers - $i + 1;
        $expo: exp-maclaurin(1 * $ratio, $curve-dir);
        $oExpo: exp-maclaurin(1 * $oRatio, $curve-dir);
        $xpoY: $y * ($expo / $ratio);
        $xpoBlur: $blur * ($expo / $ratio);
        $xpoOpacity: $opacity * ($oExpo / $oRatio);
        $shadow: 0 $xpoY $xpoBlur rgba($color, $xpoOpacity);
        $shadows: append($shadows, $shadow);
    }

    $output: false;

    @if $type==box or $type==text {
        @each $shad in $shadows {
            @if $output {
                $output: $output, $shad;
            }

            @else {
                $output: $shad;
            }
        }

        #{$type}-shadow: $output;
    }

    @else {
        @each $shad in $shadows {
            @if $output {
                $output: $output drop-shadow(#{$shad});
            }

            @else {
                $output: drop-shadow(#{$shad});
            }
        }

        filter: $output;
    }
}

/// Description : Change Foundation grid gutters size
/// @param {Value px} $size - Value in px for the size of grid foundation margins
/// @example .woody-component-teaser {@include gap(50px);}
@mixin gap($size) {

    .grid-padding-x,
    &.grid-padding-x {
        @include xy-gutters($size, margin, top bottom left right, true);

        >.cell {
            @include xy-gutters($size, padding, top bottom left right);
        }
    }
}

/// Description : Limit the width of the woody_base_grid_wrapper to have smaller basicCards
/// @author Orphée Besson
/// @param {Value} $nb-cols - Maximum number of columns that the loop will increment
@mixin maxWidthGridCards($nb-cols: 2) {
    @for $i from 1 through $nb-cols {
        &-#{$i} {
            margin: 0 auto; // Center cards in the .woody_base_grid_wrapper

            @if $i<2 {
                @include breakpoint(medium) {
                    max-width: calc(100vw / calc(1.5 / #{$i}));
                }

                @include breakpoint(xmedium) {
                    max-width: calc(100vw / calc(2 / #{$i}));
                }
            }

            @include breakpoint(large) {
                max-width: calc(100vw / calc(3 / #{$i}));
            }

            @include breakpoint(xlarge) {
                max-width: calc(100vw / calc(4 / #{$i}));
            }

            @include breakpoint(xxlarge) {
                max-width: calc(100vw / calc(5 / #{$i}));
            }
        }
    }
}

@mixin border($size: 1px, $type: solid, $color: $black, $opacity: .2, $side: all) {
    $opacity: $opacity * 100%;

    @if $side==all {
        border: $size $type mix($color, $white, $opacity);
    }

    @else {
        border-#{$side}: $size $type mix($color, $white, $opacity);
    }

    @include root-bg($foundation-palette) {
        @if in_list($dark-list, $current-loop-color) {
            @if $side==all {
                border-color: mix($white, $current-loop-hex, $opacity);
            }

            @else {
                border-#{$side}-color: mix($white, $current-loop-hex, $opacity);
            }
        }
    }
}

@mixin grid-borders($size: 1px, $type: solid, $color: $black, $opacity: .3) {
    @include border($size, $type, $color, $opacity);
    margin-top: -1px;
    margin-left: -1px;
}

@mixin positionInDiv ($alignmentY, $offsetValue, $offetSideX) {

    #{$offetSideX}: $offsetValue;
    #{$alignmentY}: 0;

    @if $alignmentY==bottom {
        top: initial;
    }

    @if $alignmentY==top {
        bottom: initial;
    }

}
